1.分类依据


2.权限


3.拓展


4.版本

5.流控
6.幂等
7.响应



日志收集
文档


漏桶(Leaky Bucket)算法
令牌桶算法(Token Bucket)
计数器





但是好的API接口对于用户来说必须满足以下几个点：

易学习：有完善的文档及提供尽可能多的示例和可copy－paste的代码，像其他设计工作一样，你应该应用最小惊讶原则。
易使用：没有复杂的程序、复杂的细节，易于学习；灵活的API允许按字段排序、可自定义分页、 排序和筛选等。一个完整的API意味着被期望的功能都包含在内。
难误用：对详细的错误提示，有些经验的用户可以直接使用API而不需要阅读文档。
而对于开发人员来说，要求又是不一样的：

易阅读：代码的编写只需要一次一次，但是当调试或者修改的时候都需要对代码进行阅读。
易开发：个最小化的接口是使用尽可能少的类以及尽可能少的类成员。这样使得理解、记忆、调试以及改变API更容易










添加头信息控制版本

在API请求header中添加Accept字段。 
Accept的作用是客户端指出响应可以接受的媒体类型 
如Accept:application/json; version=v2 
具体格式也可以参考下面。

Accept: application/vnd.xxxx[.version].param[+json]
1
例如Accept: application/vnd.demo.app-v2+json 
优点：遵循了REST的原则 
缺点：不够直观



SSL
token
返回数据结构，响应状态码
接口文档，测试程序










































无版本控制
这是最简单的方法，它对于一些内部 API 来说可能是可以接受的。 较大的更改可以表示为新资源或新链接。 向现有资源添加内容可能未呈现重大更改，因为不应查看此内容的客户端应用程序将直接忽略它。
例如，向 URI http://adventure-works.com/customers/3 发出请求应返回包含客户端应用程序所需的 id、name 和 address 字段的单个客户的详细信息：
HTTP

复制
HTTP/1.1 200 OK
Content-Type: application/json; charset=utf-8

{"id":3,"name":"Contoso LLC","address":"1 Microsoft Way Redmond WA 98053"}
备注

为简单起见，本部分中所示的示例响应不包含 HATEOAS 链接。
如果 DateCreated 字段已添加到客户资源的架构中，则响应将如下所示：
HTTP

复制
HTTP/1.1 200 OK
Content-Type: application/json; charset=utf-8

{"id":3,"name":"Contoso LLC","dateCreated":"2014-09-04T12:11:38.0376089Z","address":"1 Microsoft Way Redmond WA 98053"}
现有的客户端应用程序可能会继续正常工作（如果能够忽略无法识别的字段），而新的客户端应用程序则可以设计为处理该新字段。 但是，如果对资源的架构进行了更根本的更改（如删除或重命名字段）或资源之间的关系发生更改，则这些更改可能构成重大更改，从而阻止现有客户端应用程序正常工作。 在这些情况下应考虑以下方法之一。
URI 版本控制
每次修改 Web API 或更改资源的架构时，向每个资源的 URI 添加版本号。 以前存在的 URI 应像以前一样继续运行，并返回符合原始架构的资源。
继续前面的示例，如果将 address 字段重构为包含地址的每个构成部分的子字段（例如 streetAddress、city、state 和 zipCode），则此版本的资源可通过包含版本号的 URI（如 http://adventure-works.com/v2/customers/3:）公开：
HTTP

复制
HTTP/1.1 200 OK
Content-Type: application/json; charset=utf-8

{"id":3,"name":"Contoso LLC","dateCreated":"2014-09-04T12:11:38.0376089Z","address":{"streetAddress":"1 Microsoft Way","city":"Redmond","state":"WA","zipCode":98053}}
此版本控制机制非常简单，但依赖于将请求路由到相应终结点的服务器。 但是，随着 Web API 经过多次迭代而变得成熟，服务器必须支持多个不同版本，它可能变得难以处理。 此外，从单纯的角度来看，在所有情况下客户端应用程序都要提取相同数据（客户 3），因此 URI 实在不应该因版本而有所不同。 此方案也增加了 HATEOAS 实现的复杂性，因为所有链接都需要在其 URI 中包括版本号。
查询字符串版本控制
不是提供多个 URI，而是可以通过在追加到 HTTP 请求后面的查询字符串中使用参数来指定资源的版本，例如 http://adventure-works.com/customers/3?version=2 。 如果 version 参数被较旧的客户端应用程序省略，则应默认为有意义的值（例如 1）。
此方法具有语义优势（即，同一资源始终从同一 URI 进行检索），但它依赖于代码处理请求以分析查询字符串并发送回相应的 HTTP 响应。 此方法也与 URI 版本控制机制一样，增加了实现 HATEOAS 的复杂性。
备注

某些较旧的 Web 浏览器和 Web 代理不会缓存在 URI 中包含查询字符串的请求的响应。 这可能会对使用 Web API 的 Web 应用程序以及从此类 Web 浏览器运行的 Web 应用程序的性能产生不利影响。
标头版本控制
不是追加版本号作为查询字符串参数，而是可以实现指示资源的版本的自定义标头。 此方法需要客户端应用程序将相应标头添加到所有请求，虽然如果省略了版本标头，处理客户端请求的代码可以使用默认值（版本 1）。 下面的示例利用了名为 Custom-Header 的自定义标头。 此标头的值指示 Web API 的版本。
版本 1：
HTTP

复制
GET http://adventure-works.com/customers/3 HTTP/1.1
Custom-Header: api-version=1
HTTP

复制
HTTP/1.1 200 OK
Content-Type: application/json; charset=utf-8

{"id":3,"name":"Contoso LLC","address":"1 Microsoft Way Redmond WA 98053"}
版本 2：
HTTP

复制
GET http://adventure-works.com/customers/3 HTTP/1.1
Custom-Header: api-version=2
HTTP

复制
HTTP/1.1 200 OK
Content-Type: application/json; charset=utf-8

{"id":3,"name":"Contoso LLC","dateCreated":"2014-09-04T12:11:38.0376089Z","address":{"streetAddress":"1 Microsoft Way","city":"Redmond","state":"WA","zipCode":98053}}
请注意，与前面两个方法一样，实现 HATEOAS 需要在任何链接中包括相应的自定义标头。